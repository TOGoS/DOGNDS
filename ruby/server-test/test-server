#!/usr/bin/ruby

require 'TOGoS/Base32'
require 'DOGNDS/HTTP/SimpleHTTP1_0Client'

require 'digest/sha1'

module DOGNDS ; module ServerTest
  class HTTPServiceTest
    def http_client
      @http_client ||= DOGNDS::HTTP::SimpleHTTP1_0Client.new
    end
    
    def sha1_urn( data )
      raise "Cannot hash non-string: #{data.class}" unless data.is_a? String
      return "urn:sha1:"+TOGoS::Base32.encode32(Digest::SHA1.digest(data))
    end
    
    def mkreq( verb, uri, headers={}, data=nil )
      return DOGNDS::HTTP::HTTPRequest.new(verb, uri, headers, data)
    end
    
    def assert_status( status, res )
      unless status === res.status_code
        raise "Expected #{status} response but got #{res.status_code}.\n"+res.content
      end
    end
    
    def assert_ok( res )
      assert_status( 200..299, res )
    end
    
    def assert_equals( expected, actual )
      if expected != actual
        raise "Expected #{expected.inspect} but got #{actual.inspect}"
      end
    end
    
    def to_s
      return self.class.name
    end
  end
  
  class PutGetUnsignedBlobTest < HTTPServiceTest
    def test( base_uri )
      data = (0..128).map{rand(255).chr}.join
      urn = sha1_urn( data )
      
      res = http_client.call( mkreq('GET',base_uri+'N2R?'+urn) )
      assert_status( 404, res )
      
      res = http_client.call( mkreq('PUT',base_uri+'N2R?'+urn,{},data) )
      assert_ok( res )
      
      res = http_client.call( mkreq('GET',base_uri+'N2R?'+urn) )
      assert_ok( res )
      assert_equals( data, res.content )
    end
  end
  
  class PutBlobWithMismatchingURNTest < HTTPServiceTest
    def test( base_uri )
      data = (0..128).map{rand(255).chr}.join
      urn = sha1_urn( data )
      bad_urn = sha1_urn( data + 'xyz' )
      
      res = http_client.call( mkreq('GET',base_uri+'N2R?'+urn) )
      assert_status( 404, res )
      
      res = http_client.call( mkreq('GET',base_uri+'N2R?'+bad_urn) )
      assert_status( 404, res )
      
      res = http_client.call( mkreq('PUT',base_uri+'N2R?'+bad_urn,{},data) )
      assert_status( 409, res )
      
      res = http_client.call( mkreq('GET',base_uri+'N2R?'+urn) )
      assert_status( 404, res )
      
      res = http_client.call( mkreq('GET',base_uri+'N2R?'+bad_urn) )
      assert_status( 404, res )
    end
  end
  
  class GoodSignatureTest < HTTPServiceTest
    def test( base_uri )
      csigtest_uri = "http://www.nuke24.net/misc/csigtest"
      data = (0..128).map{rand(255).chr}.join
      
      require 'base64'
      require 'openssl'
      require 'DOGNDS/Crypto/KeyUtil'
      
      key = OpenSSL::PKey::RSA.generate( 2048 )
      digest = OpenSSL::Digest::SHA1.new
      sig = key.sign( digest, data )
      pubkey_data = DOGNDS::Crypto::KeyUtil.public_key_info( key ).to_der
      pubkey_urn = sha1_urn( pubkey_data )
      
      csig = "signature=#{sig.unpack('H*')}; algorithm=SHA1withRSA; signer=#{pubkey_urn}"
      
      res = http_client.call( mkreq('PUT',base_uri+'N2R?'+pubkey_urn, {}, pubkey_data) )
      assert_ok( res )
      
      res = http_client.call( mkreq('POST',csigtest_uri,{'content-signature'=>csig},data) )
      assert_ok( res )
    end
  end
  
  class BadSignatureTest < HTTPServiceTest
    def test( base_uri )
      csigtest_uri = "http://www.nuke24.net/misc/csigtest"
      data = (0..128).map{rand(255).chr}.join
      
      require 'base64'
      require 'openssl'
      require 'DOGNDS/Crypto/KeyUtil'
      
      key = OpenSSL::PKey::RSA.generate( 2048 )
      digest = OpenSSL::Digest::SHA1.new
      sig = key.sign( digest, data+'x' )
      pubkey_data = DOGNDS::Crypto::KeyUtil.public_key_info( key ).to_der
      pubkey_urn = sha1_urn( pubkey_data )
      
      csig = "signature=#{sig.unpack('H*')}; algorithm=SHA1withRSA; signer=#{pubkey_urn}"
      
      res = http_client.call( mkreq('PUT',base_uri+'N2R?'+pubkey_urn, {}, pubkey_data) )
      assert_ok( res )
      
      res = http_client.call( mkreq('POST',csigtest_uri,{'content-signature'=>csig},data) )
      assert_status( 400..499, res )
    end
  end
  
  class TestRunner
    def test( base_uri )
      tests = []
      tests << PutGetUnsignedBlobTest.new
      tests << PutBlobWithMismatchingURNTest.new
      #tests << GoodSignatureTest.new
      #tests << BadSignatureTest.new
      
      failures = 0
      
      for t in tests
        begin
          t.test( base_uri )
        rescue => e
          STDERR.puts "Failed: #{t}"
          STDERR.puts e.message
          for b in e.backtrace
            STDERR.puts "  " + b
          end
          failures += 1
        end
      end
      
      return failures
    end
  end
end ; end

exit DOGNDS::ServerTest::TestRunner.new.test( 'http://www.nuke24.net/uri-res/' )
